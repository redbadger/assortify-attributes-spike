### This file was generated by Nexus Schema
### Do not make changes to this file directly


input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

"""
PageInfo cursor, as defined in https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  The cursor corresponding to the last nodes in edges. Null if the connection is empty.
  """
  endCursor: String

  """
  Used to indicate whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Used to indicate whether more edges exist prior to the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  The cursor corresponding to the first nodes in edges. Null if the connection is empty.
  """
  startCursor: String
}

type Product {
  colorwayName: String!
  id: Int!
  pc9: String!
}

type ProductInProductList {
  exclusive: String
  id: Int!
}

input ProductInProductListListRelationFilter {
  every: ProductInProductListWhereInput
  none: ProductInProductListWhereInput
  some: ProductInProductListWhereInput
}

input ProductInProductListWhereInput {
  AND: [ProductInProductListWhereInput!]
  NOT: [ProductInProductListWhereInput!]
  OR: [ProductInProductListWhereInput!]
  exclusive: StringNullableFilter
  id: IntFilter
  product: ProductWhereInput
  productId: IntFilter
  productList: ProductListWhereInput
  productListId: IntFilter
}

type ProductList {
  id: Int!
  productListProductConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): ProductListProductConnection!
  title: String!
}

type ProductListProduct {
  product: Product!
  productInProductList: ProductInProductList!
}

type ProductListProductConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [ProductListProductEdge!]!

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type ProductListProductEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: ProductListProduct!
}

input ProductListWhereInput {
  AND: [ProductListWhereInput!]
  NOT: [ProductListWhereInput!]
  OR: [ProductListWhereInput!]
  id: IntFilter
  products: ProductInProductListListRelationFilter
  title: StringFilter
}

input ProductListWhereUniqueInput {
  id: Int
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  colorwayName: StringFilter
  id: IntFilter
  pc9: StringFilter
  productLists: ProductInProductListListRelationFilter
}

input ProductWhereUniqueInput {
  id: Int
}

type Query {
  product(where: ProductWhereUniqueInput!): Product
  productList(where: ProductListWhereUniqueInput!): ProductList
  productLists(after: ProductListWhereUniqueInput, before: ProductListWhereUniqueInput, first: Int, last: Int, where: ProductListWhereInput): [ProductList!]!
  products(after: ProductWhereUniqueInput, before: ProductWhereUniqueInput, first: Int, last: Int, where: ProductWhereInput): [Product!]!
}

enum QueryMode {
  default
  insensitive
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}