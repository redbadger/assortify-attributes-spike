### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Channel {
  id: ID!
  name: String!
  ownId: Int!
}

input ChannelCreateNestedOneWithoutProductListsInput {
  connect: ChannelWhereUniqueInput
  connectOrCreate: ChannelCreateOrConnectWithoutProductListsInput
  create: ChannelCreateWithoutProductListsInput
}

input ChannelCreateOrConnectWithoutProductListsInput {
  create: ChannelCreateWithoutProductListsInput!
  where: ChannelWhereUniqueInput!
}

input ChannelCreateWithoutProductListsInput {
  name: String!
}

type ChannelInProductList {
  channel: Channel!
  id: ID!
  ownId: Int!
}

input ChannelInProductListChannelIdProductListIdCompoundUniqueInput {
  channelId: Int!
  productListId: Int!
}

input ChannelInProductListCreateManyProductListInput {
  channelId: Int!
  id: Int
}

input ChannelInProductListCreateManyProductListInputEnvelope {
  data: [ChannelInProductListCreateManyProductListInput!]
  skipDuplicates: Boolean
}

input ChannelInProductListCreateNestedManyWithoutProductListInput {
  connect: [ChannelInProductListWhereUniqueInput!]
  connectOrCreate: [ChannelInProductListCreateOrConnectWithoutProductListInput!]
  create: [ChannelInProductListCreateWithoutProductListInput!]
  createMany: ChannelInProductListCreateManyProductListInputEnvelope
}

input ChannelInProductListCreateOrConnectWithoutProductListInput {
  create: ChannelInProductListCreateWithoutProductListInput!
  where: ChannelInProductListWhereUniqueInput!
}

input ChannelInProductListCreateWithoutProductListInput {
  channel: ChannelCreateNestedOneWithoutProductListsInput!
}

input ChannelInProductListListRelationFilter {
  every: ChannelInProductListWhereInput
  none: ChannelInProductListWhereInput
  some: ChannelInProductListWhereInput
}

input ChannelInProductListScalarWhereInput {
  AND: [ChannelInProductListScalarWhereInput!]
  NOT: [ChannelInProductListScalarWhereInput!]
  OR: [ChannelInProductListScalarWhereInput!]
  channelId: IntFilter
  id: IntFilter
  productListId: IntFilter
}

input ChannelInProductListUpdateManyMutationInput {
  """
  Dummy field to avoid Error: Input Object type ChannelInProductListUpdateManyMutationInput must define one or more fields.
  """
  _dummy_field: Int
}

input ChannelInProductListUpdateManyWithWhereWithoutProductListInput {
  data: ChannelInProductListUpdateManyMutationInput!
  where: ChannelInProductListScalarWhereInput!
}

input ChannelInProductListUpdateManyWithoutProductListInput {
  connect: [ChannelInProductListWhereUniqueInput!]
  connectOrCreate: [ChannelInProductListCreateOrConnectWithoutProductListInput!]
  create: [ChannelInProductListCreateWithoutProductListInput!]
  createMany: ChannelInProductListCreateManyProductListInputEnvelope
  delete: [ChannelInProductListWhereUniqueInput!]
  deleteMany: [ChannelInProductListScalarWhereInput!]
  disconnect: [ChannelInProductListWhereUniqueInput!]
  set: [ChannelInProductListWhereUniqueInput!]
  update: [ChannelInProductListUpdateWithWhereUniqueWithoutProductListInput!]
  updateMany: [ChannelInProductListUpdateManyWithWhereWithoutProductListInput!]
  upsert: [ChannelInProductListUpsertWithWhereUniqueWithoutProductListInput!]
}

input ChannelInProductListUpdateWithWhereUniqueWithoutProductListInput {
  data: ChannelInProductListUpdateWithoutProductListInput!
  where: ChannelInProductListWhereUniqueInput!
}

input ChannelInProductListUpdateWithoutProductListInput {
  channel: ChannelUpdateOneRequiredWithoutProductListsInput
}

input ChannelInProductListUpsertWithWhereUniqueWithoutProductListInput {
  create: ChannelInProductListCreateWithoutProductListInput!
  update: ChannelInProductListUpdateWithoutProductListInput!
  where: ChannelInProductListWhereUniqueInput!
}

input ChannelInProductListWhereInput {
  AND: [ChannelInProductListWhereInput!]
  NOT: [ChannelInProductListWhereInput!]
  OR: [ChannelInProductListWhereInput!]
  channel: ChannelWhereInput
  channelId: IntFilter
  id: IntFilter
  productList: ProductListWhereInput
  productListId: IntFilter
}

input ChannelInProductListWhereUniqueInput {
  channelId_productListId: ChannelInProductListChannelIdProductListIdCompoundUniqueInput
  id: Int
}

input ChannelUpdateOneRequiredWithoutProductListsInput {
  connect: ChannelWhereUniqueInput
  connectOrCreate: ChannelCreateOrConnectWithoutProductListsInput
  create: ChannelCreateWithoutProductListsInput
  update: ChannelUpdateWithoutProductListsInput
  upsert: ChannelUpsertWithoutProductListsInput
}

input ChannelUpdateWithoutProductListsInput {
  name: StringFieldUpdateOperationsInput
}

input ChannelUpsertWithoutProductListsInput {
  create: ChannelCreateWithoutProductListsInput!
  update: ChannelUpdateWithoutProductListsInput!
}

input ChannelWhereInput {
  AND: [ChannelWhereInput!]
  NOT: [ChannelWhereInput!]
  OR: [ChannelWhereInput!]
  id: IntFilter
  name: StringFilter
  productLists: ChannelInProductListListRelationFilter
}

input ChannelWhereUniqueInput {
  id: Int
  name: String
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

type Mutation {
  updateManyProductInProductList(data: [ProductInProductListUpdateRowInput!]): [ProductInProductList!]!
  updateOneProductInProductList(data: ProductInProductListUpdateInput!, where: ProductInProductListWhereUniqueInput!): ProductInProductList
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

"""
PageInfo cursor, as defined in https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  The cursor corresponding to the last nodes in edges. Null if the connection is empty.
  """
  endCursor: String

  """
  Used to indicate whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Used to indicate whether more edges exist prior to the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  The cursor corresponding to the first nodes in edges. Null if the connection is empty.
  """
  startCursor: String
}

type Product {
  colorwayName: String!
  id: ID!
  ownId: Int!
  pc9: String!
}

input ProductCreateOrConnectWithoutProductListsInput {
  create: ProductCreateWithoutProductListsInput!
  where: ProductWhereUniqueInput!
}

input ProductCreateWithoutProductListsInput {
  colorwayName: String!
  pc9: String!
}

type ProductInProductList {
  exclusive: String
  exclusiveComments: String
  id: ID!
  minimumOrderQuantity: Int
  ownId: Int!
  productLifecycleGroup: ProductLifecycleGroup
}

input ProductInProductListListRelationFilter {
  every: ProductInProductListWhereInput
  none: ProductInProductListWhereInput
  some: ProductInProductListWhereInput
}

input ProductInProductListProductIdProductListIdCompoundUniqueInput {
  productId: Int!
  productListId: Int!
}

input ProductInProductListUpdateInput {
  exclusive: NullableStringFieldUpdateOperationsInput
  exclusiveComments: NullableStringFieldUpdateOperationsInput
  minimumOrderQuantity: NullableIntFieldUpdateOperationsInput
  product: ProductUpdateOneRequiredWithoutProductListsInput
  productLifecycleGroup: ProductLifecycleGroupUpdateOneWithoutProductInProductListInput
  productList: ProductListUpdateOneRequiredWithoutProductsInput
}

input ProductInProductListUpdateRowInput {
  data: ProductInProductListUpdateInput!
  where: ProductInProductListWhereUniqueInput!
}

input ProductInProductListWhereInput {
  AND: [ProductInProductListWhereInput!]
  NOT: [ProductInProductListWhereInput!]
  OR: [ProductInProductListWhereInput!]
  exclusive: StringNullableFilter
  exclusiveComments: StringNullableFilter
  id: IntFilter
  minimumOrderQuantity: IntNullableFilter
  product: ProductWhereInput
  productId: IntFilter
  productLifecycleGroup: ProductLifecycleGroupWhereInput
  productLifecycleGroupName: StringNullableFilter
  productList: ProductListWhereInput
  productListId: IntFilter
}

input ProductInProductListWhereUniqueInput {
  id: Int
  productId_productListId: ProductInProductListProductIdProductListIdCompoundUniqueInput
}

type ProductLifecycleGroup {
  displayName: String!
  name: String!
}

input ProductLifecycleGroupCreateOrConnectWithoutProductInProductListInput {
  create: ProductLifecycleGroupCreateWithoutProductInProductListInput!
  where: ProductLifecycleGroupWhereUniqueInput!
}

input ProductLifecycleGroupCreateWithoutProductInProductListInput {
  displayName: String!
  name: String!
}

input ProductLifecycleGroupUpdateOneWithoutProductInProductListInput {
  connect: ProductLifecycleGroupWhereUniqueInput
  connectOrCreate: ProductLifecycleGroupCreateOrConnectWithoutProductInProductListInput
  create: ProductLifecycleGroupCreateWithoutProductInProductListInput
  delete: Boolean
  disconnect: Boolean
  update: ProductLifecycleGroupUpdateWithoutProductInProductListInput
  upsert: ProductLifecycleGroupUpsertWithoutProductInProductListInput
}

input ProductLifecycleGroupUpdateWithoutProductInProductListInput {
  displayName: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input ProductLifecycleGroupUpsertWithoutProductInProductListInput {
  create: ProductLifecycleGroupCreateWithoutProductInProductListInput!
  update: ProductLifecycleGroupUpdateWithoutProductInProductListInput!
}

input ProductLifecycleGroupWhereInput {
  AND: [ProductLifecycleGroupWhereInput!]
  NOT: [ProductLifecycleGroupWhereInput!]
  OR: [ProductLifecycleGroupWhereInput!]
  ProductInProductList: ProductInProductListListRelationFilter
  displayName: StringFilter
  name: StringFilter
}

input ProductLifecycleGroupWhereUniqueInput {
  displayName: String
  name: String
}

type ProductList {
  channels(after: ChannelInProductListWhereUniqueInput, before: ChannelInProductListWhereUniqueInput, first: Int, last: Int): [ChannelInProductList!]!
  id: ID!
  ownId: Int!
  productListProductConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): ProductListProductConnection!
  title: String!
}

input ProductListCreateOrConnectWithoutProductsInput {
  create: ProductListCreateWithoutProductsInput!
  where: ProductListWhereUniqueInput!
}

input ProductListCreateWithoutProductsInput {
  channels: ChannelInProductListCreateNestedManyWithoutProductListInput
  title: String!
}

type ProductListProduct {
  id: ID!
  product: Product!
  productInProductList: ProductInProductList!
}

type ProductListProductConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [ProductListProductEdge!]!

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type ProductListProductEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: ProductListProduct!
}

input ProductListUpdateOneRequiredWithoutProductsInput {
  connect: ProductListWhereUniqueInput
  connectOrCreate: ProductListCreateOrConnectWithoutProductsInput
  create: ProductListCreateWithoutProductsInput
  update: ProductListUpdateWithoutProductsInput
  upsert: ProductListUpsertWithoutProductsInput
}

input ProductListUpdateWithoutProductsInput {
  channels: ChannelInProductListUpdateManyWithoutProductListInput
  title: StringFieldUpdateOperationsInput
}

input ProductListUpsertWithoutProductsInput {
  create: ProductListCreateWithoutProductsInput!
  update: ProductListUpdateWithoutProductsInput!
}

input ProductListWhereInput {
  AND: [ProductListWhereInput!]
  NOT: [ProductListWhereInput!]
  OR: [ProductListWhereInput!]
  channels: ChannelInProductListListRelationFilter
  id: IntFilter
  products: ProductInProductListListRelationFilter
  title: StringFilter
}

input ProductListWhereUniqueInput {
  id: Int
}

input ProductUpdateOneRequiredWithoutProductListsInput {
  connect: ProductWhereUniqueInput
  connectOrCreate: ProductCreateOrConnectWithoutProductListsInput
  create: ProductCreateWithoutProductListsInput
  update: ProductUpdateWithoutProductListsInput
  upsert: ProductUpsertWithoutProductListsInput
}

input ProductUpdateWithoutProductListsInput {
  colorwayName: StringFieldUpdateOperationsInput
  pc9: StringFieldUpdateOperationsInput
}

input ProductUpsertWithoutProductListsInput {
  create: ProductCreateWithoutProductListsInput!
  update: ProductUpdateWithoutProductListsInput!
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  colorwayName: StringFilter
  id: IntFilter
  pc9: StringFilter
  productLists: ProductInProductListListRelationFilter
}

input ProductWhereUniqueInput {
  id: Int
}

type Query {
  product(where: ProductWhereUniqueInput!): Product
  productLifecycleGroup(where: ProductLifecycleGroupWhereUniqueInput!): ProductLifecycleGroup
  productLifecycleGroups(after: ProductLifecycleGroupWhereUniqueInput, before: ProductLifecycleGroupWhereUniqueInput, first: Int, last: Int, where: ProductLifecycleGroupWhereInput): [ProductLifecycleGroup!]!
  productList(where: ProductListWhereUniqueInput!): ProductList
  productLists(after: ProductListWhereUniqueInput, before: ProductListWhereUniqueInput, first: Int, last: Int, where: ProductListWhereInput): [ProductList!]!
  products(after: ProductWhereUniqueInput, before: ProductWhereUniqueInput, first: Int, last: Int, where: ProductWhereInput): [Product!]!
}

enum QueryMode {
  default
  insensitive
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}