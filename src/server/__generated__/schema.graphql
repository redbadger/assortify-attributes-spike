### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Channel {
  id: ID!
  name: String!
  ownId: Int!
}

input ChannelCreateNestedOneWithoutDistributionsInput {
  connect: ChannelWhereUniqueInput
  connectOrCreate: ChannelCreateOrConnectWithoutDistributionsInput
  create: ChannelCreateWithoutDistributionsInput
}

input ChannelCreateNestedOneWithoutProductListsInput {
  connect: ChannelWhereUniqueInput
  connectOrCreate: ChannelCreateOrConnectWithoutProductListsInput
  create: ChannelCreateWithoutProductListsInput
}

input ChannelCreateOrConnectWithoutDistributionsInput {
  create: ChannelCreateWithoutDistributionsInput!
  where: ChannelWhereUniqueInput!
}

input ChannelCreateOrConnectWithoutProductListsInput {
  create: ChannelCreateWithoutProductListsInput!
  where: ChannelWhereUniqueInput!
}

input ChannelCreateWithoutDistributionsInput {
  name: String!
  productLists: ChannelInProductListCreateNestedManyWithoutChannelInput
}

input ChannelCreateWithoutProductListsInput {
  distributions: DistributionCreateNestedManyWithoutChannelInput
  name: String!
}

type ChannelInProductList {
  channel: Channel!
  id: ID!
  ownId: Int!
}

input ChannelInProductListChannelIdProductListIdCompoundUniqueInput {
  channelId: Int!
  productListId: Int!
}

input ChannelInProductListCreateManyChannelInput {
  id: Int
  productListId: Int!
}

input ChannelInProductListCreateManyChannelInputEnvelope {
  data: [ChannelInProductListCreateManyChannelInput!]
  skipDuplicates: Boolean
}

input ChannelInProductListCreateManyProductListInput {
  channelId: Int!
  id: Int
}

input ChannelInProductListCreateManyProductListInputEnvelope {
  data: [ChannelInProductListCreateManyProductListInput!]
  skipDuplicates: Boolean
}

input ChannelInProductListCreateNestedManyWithoutChannelInput {
  connect: [ChannelInProductListWhereUniqueInput!]
  connectOrCreate: [ChannelInProductListCreateOrConnectWithoutChannelInput!]
  create: [ChannelInProductListCreateWithoutChannelInput!]
  createMany: ChannelInProductListCreateManyChannelInputEnvelope
}

input ChannelInProductListCreateNestedManyWithoutProductListInput {
  connect: [ChannelInProductListWhereUniqueInput!]
  connectOrCreate: [ChannelInProductListCreateOrConnectWithoutProductListInput!]
  create: [ChannelInProductListCreateWithoutProductListInput!]
  createMany: ChannelInProductListCreateManyProductListInputEnvelope
}

input ChannelInProductListCreateOrConnectWithoutChannelInput {
  create: ChannelInProductListCreateWithoutChannelInput!
  where: ChannelInProductListWhereUniqueInput!
}

input ChannelInProductListCreateOrConnectWithoutProductListInput {
  create: ChannelInProductListCreateWithoutProductListInput!
  where: ChannelInProductListWhereUniqueInput!
}

input ChannelInProductListCreateWithoutChannelInput {
  productList: ProductListCreateNestedOneWithoutChannelsInput!
}

input ChannelInProductListCreateWithoutProductListInput {
  channel: ChannelCreateNestedOneWithoutProductListsInput!
}

input ChannelInProductListListRelationFilter {
  every: ChannelInProductListWhereInput
  none: ChannelInProductListWhereInput
  some: ChannelInProductListWhereInput
}

input ChannelInProductListScalarWhereInput {
  AND: [ChannelInProductListScalarWhereInput!]
  NOT: [ChannelInProductListScalarWhereInput!]
  OR: [ChannelInProductListScalarWhereInput!]
  channelId: IntFilter
  id: IntFilter
  productListId: IntFilter
}

input ChannelInProductListUpdateManyMutationInput {
  """Dummy field to avoid Error"""
  _dummy_field: Int
}

input ChannelInProductListUpdateManyWithWhereWithoutChannelInput {
  data: ChannelInProductListUpdateManyMutationInput!
  where: ChannelInProductListScalarWhereInput!
}

input ChannelInProductListUpdateManyWithWhereWithoutProductListInput {
  data: ChannelInProductListUpdateManyMutationInput!
  where: ChannelInProductListScalarWhereInput!
}

input ChannelInProductListUpdateManyWithoutChannelInput {
  connect: [ChannelInProductListWhereUniqueInput!]
  connectOrCreate: [ChannelInProductListCreateOrConnectWithoutChannelInput!]
  create: [ChannelInProductListCreateWithoutChannelInput!]
  createMany: ChannelInProductListCreateManyChannelInputEnvelope
  delete: [ChannelInProductListWhereUniqueInput!]
  deleteMany: [ChannelInProductListScalarWhereInput!]
  disconnect: [ChannelInProductListWhereUniqueInput!]
  set: [ChannelInProductListWhereUniqueInput!]
  update: [ChannelInProductListUpdateWithWhereUniqueWithoutChannelInput!]
  updateMany: [ChannelInProductListUpdateManyWithWhereWithoutChannelInput!]
  upsert: [ChannelInProductListUpsertWithWhereUniqueWithoutChannelInput!]
}

input ChannelInProductListUpdateManyWithoutProductListInput {
  connect: [ChannelInProductListWhereUniqueInput!]
  connectOrCreate: [ChannelInProductListCreateOrConnectWithoutProductListInput!]
  create: [ChannelInProductListCreateWithoutProductListInput!]
  createMany: ChannelInProductListCreateManyProductListInputEnvelope
  delete: [ChannelInProductListWhereUniqueInput!]
  deleteMany: [ChannelInProductListScalarWhereInput!]
  disconnect: [ChannelInProductListWhereUniqueInput!]
  set: [ChannelInProductListWhereUniqueInput!]
  update: [ChannelInProductListUpdateWithWhereUniqueWithoutProductListInput!]
  updateMany: [ChannelInProductListUpdateManyWithWhereWithoutProductListInput!]
  upsert: [ChannelInProductListUpsertWithWhereUniqueWithoutProductListInput!]
}

input ChannelInProductListUpdateWithWhereUniqueWithoutChannelInput {
  data: ChannelInProductListUpdateWithoutChannelInput!
  where: ChannelInProductListWhereUniqueInput!
}

input ChannelInProductListUpdateWithWhereUniqueWithoutProductListInput {
  data: ChannelInProductListUpdateWithoutProductListInput!
  where: ChannelInProductListWhereUniqueInput!
}

input ChannelInProductListUpdateWithoutChannelInput {
  productList: ProductListUpdateOneRequiredWithoutChannelsInput
}

input ChannelInProductListUpdateWithoutProductListInput {
  channel: ChannelUpdateOneRequiredWithoutProductListsInput
}

input ChannelInProductListUpsertWithWhereUniqueWithoutChannelInput {
  create: ChannelInProductListCreateWithoutChannelInput!
  update: ChannelInProductListUpdateWithoutChannelInput!
  where: ChannelInProductListWhereUniqueInput!
}

input ChannelInProductListUpsertWithWhereUniqueWithoutProductListInput {
  create: ChannelInProductListCreateWithoutProductListInput!
  update: ChannelInProductListUpdateWithoutProductListInput!
  where: ChannelInProductListWhereUniqueInput!
}

input ChannelInProductListWhereInput {
  AND: [ChannelInProductListWhereInput!]
  NOT: [ChannelInProductListWhereInput!]
  OR: [ChannelInProductListWhereInput!]
  channel: ChannelWhereInput
  channelId: IntFilter
  id: IntFilter
  productList: ProductListWhereInput
  productListId: IntFilter
}

input ChannelInProductListWhereUniqueInput {
  channelId_productListId: ChannelInProductListChannelIdProductListIdCompoundUniqueInput
  id: Int
}

input ChannelUpdateOneRequiredWithoutDistributionsInput {
  connect: ChannelWhereUniqueInput
  connectOrCreate: ChannelCreateOrConnectWithoutDistributionsInput
  create: ChannelCreateWithoutDistributionsInput
  update: ChannelUpdateWithoutDistributionsInput
  upsert: ChannelUpsertWithoutDistributionsInput
}

input ChannelUpdateOneRequiredWithoutProductListsInput {
  connect: ChannelWhereUniqueInput
  connectOrCreate: ChannelCreateOrConnectWithoutProductListsInput
  create: ChannelCreateWithoutProductListsInput
  update: ChannelUpdateWithoutProductListsInput
  upsert: ChannelUpsertWithoutProductListsInput
}

input ChannelUpdateWithoutDistributionsInput {
  name: StringFieldUpdateOperationsInput
  productLists: ChannelInProductListUpdateManyWithoutChannelInput
}

input ChannelUpdateWithoutProductListsInput {
  distributions: DistributionUpdateManyWithoutChannelInput
  name: StringFieldUpdateOperationsInput
}

input ChannelUpsertWithoutDistributionsInput {
  create: ChannelCreateWithoutDistributionsInput!
  update: ChannelUpdateWithoutDistributionsInput!
}

input ChannelUpsertWithoutProductListsInput {
  create: ChannelCreateWithoutProductListsInput!
  update: ChannelUpdateWithoutProductListsInput!
}

input ChannelWhereInput {
  AND: [ChannelWhereInput!]
  NOT: [ChannelWhereInput!]
  OR: [ChannelWhereInput!]
  distributions: DistributionListRelationFilter
  id: IntFilter
  name: StringFilter
  productLists: ChannelInProductListListRelationFilter
}

input ChannelWhereUniqueInput {
  id: Int
  name: String
}

type Distribution {
  channel: Channel!
  doorCount: Int!
  id: ID!
  name: String!
  ownId: Int!
}

input DistributionCreateManyChannelInput {
  doorCount: Int!
  id: Int
  name: String!
}

input DistributionCreateManyChannelInputEnvelope {
  data: [DistributionCreateManyChannelInput!]
  skipDuplicates: Boolean
}

input DistributionCreateNestedManyWithoutChannelInput {
  connect: [DistributionWhereUniqueInput!]
  connectOrCreate: [DistributionCreateOrConnectWithoutChannelInput!]
  create: [DistributionCreateWithoutChannelInput!]
  createMany: DistributionCreateManyChannelInputEnvelope
}

input DistributionCreateNestedOneWithoutProductInProductListsInput {
  connect: DistributionWhereUniqueInput
  connectOrCreate: DistributionCreateOrConnectWithoutProductInProductListsInput
  create: DistributionCreateWithoutProductInProductListsInput
}

input DistributionCreateOrConnectWithoutChannelInput {
  create: DistributionCreateWithoutChannelInput!
  where: DistributionWhereUniqueInput!
}

input DistributionCreateOrConnectWithoutProductInProductListsInput {
  create: DistributionCreateWithoutProductInProductListsInput!
  where: DistributionWhereUniqueInput!
}

input DistributionCreateWithoutChannelInput {
  doorCount: Int!
  name: String!
  productInProductLists: DistributionForProductInProductListCreateNestedManyWithoutDistributionInput
}

input DistributionCreateWithoutProductInProductListsInput {
  channel: ChannelCreateNestedOneWithoutDistributionsInput!
  doorCount: Int!
  name: String!
}

type DistributionForProductInProductList {
  distribution: Distribution!
  id: ID!
  ownId: Int!
}

input DistributionForProductInProductListCreateManyDistributionInput {
  id: Int
  productInProductListId: Int!
}

input DistributionForProductInProductListCreateManyDistributionInputEnvelope {
  data: [DistributionForProductInProductListCreateManyDistributionInput!]
  skipDuplicates: Boolean
}

input DistributionForProductInProductListCreateManyProductInProductListInput {
  distributionId: Int!
  id: Int
}

input DistributionForProductInProductListCreateManyProductInProductListInputEnvelope {
  data: [DistributionForProductInProductListCreateManyProductInProductListInput!]
  skipDuplicates: Boolean
}

input DistributionForProductInProductListCreateNestedManyWithoutDistributionInput {
  connect: [DistributionForProductInProductListWhereUniqueInput!]
  connectOrCreate: [DistributionForProductInProductListCreateOrConnectWithoutDistributionInput!]
  create: [DistributionForProductInProductListCreateWithoutDistributionInput!]
  createMany: DistributionForProductInProductListCreateManyDistributionInputEnvelope
}

input DistributionForProductInProductListCreateNestedManyWithoutProductInProductListInput {
  connect: [DistributionForProductInProductListWhereUniqueInput!]
  connectOrCreate: [DistributionForProductInProductListCreateOrConnectWithoutProductInProductListInput!]
  create: [DistributionForProductInProductListCreateWithoutProductInProductListInput!]
  createMany: DistributionForProductInProductListCreateManyProductInProductListInputEnvelope
}

input DistributionForProductInProductListCreateOrConnectWithoutDistributionInput {
  create: DistributionForProductInProductListCreateWithoutDistributionInput!
  where: DistributionForProductInProductListWhereUniqueInput!
}

input DistributionForProductInProductListCreateOrConnectWithoutProductInProductListInput {
  create: DistributionForProductInProductListCreateWithoutProductInProductListInput!
  where: DistributionForProductInProductListWhereUniqueInput!
}

input DistributionForProductInProductListCreateWithoutDistributionInput {
  productInProductList: ProductInProductListCreateNestedOneWithoutDistributionsInput!
}

input DistributionForProductInProductListCreateWithoutProductInProductListInput {
  distribution: DistributionCreateNestedOneWithoutProductInProductListsInput!
}

input DistributionForProductInProductListDistributionIdProductInProductListIdCompoundUniqueInput {
  distributionId: Int!
  productInProductListId: Int!
}

input DistributionForProductInProductListListRelationFilter {
  every: DistributionForProductInProductListWhereInput
  none: DistributionForProductInProductListWhereInput
  some: DistributionForProductInProductListWhereInput
}

input DistributionForProductInProductListScalarWhereInput {
  AND: [DistributionForProductInProductListScalarWhereInput!]
  NOT: [DistributionForProductInProductListScalarWhereInput!]
  OR: [DistributionForProductInProductListScalarWhereInput!]
  distributionId: IntFilter
  id: IntFilter
  productInProductListId: IntFilter
}

input DistributionForProductInProductListUpdateManyMutationInput {
  """Dummy field to avoid Error"""
  _dummy_field: Int
}

input DistributionForProductInProductListUpdateManyWithWhereWithoutDistributionInput {
  data: DistributionForProductInProductListUpdateManyMutationInput!
  where: DistributionForProductInProductListScalarWhereInput!
}

input DistributionForProductInProductListUpdateManyWithWhereWithoutProductInProductListInput {
  data: DistributionForProductInProductListUpdateManyMutationInput!
  where: DistributionForProductInProductListScalarWhereInput!
}

input DistributionForProductInProductListUpdateManyWithoutDistributionInput {
  connect: [DistributionForProductInProductListWhereUniqueInput!]
  connectOrCreate: [DistributionForProductInProductListCreateOrConnectWithoutDistributionInput!]
  create: [DistributionForProductInProductListCreateWithoutDistributionInput!]
  createMany: DistributionForProductInProductListCreateManyDistributionInputEnvelope
  delete: [DistributionForProductInProductListWhereUniqueInput!]
  deleteMany: [DistributionForProductInProductListScalarWhereInput!]
  disconnect: [DistributionForProductInProductListWhereUniqueInput!]
  set: [DistributionForProductInProductListWhereUniqueInput!]
  update: [DistributionForProductInProductListUpdateWithWhereUniqueWithoutDistributionInput!]
  updateMany: [DistributionForProductInProductListUpdateManyWithWhereWithoutDistributionInput!]
  upsert: [DistributionForProductInProductListUpsertWithWhereUniqueWithoutDistributionInput!]
}

input DistributionForProductInProductListUpdateManyWithoutProductInProductListInput {
  connect: [DistributionForProductInProductListWhereUniqueInput!]
  connectOrCreate: [DistributionForProductInProductListCreateOrConnectWithoutProductInProductListInput!]
  create: [DistributionForProductInProductListCreateWithoutProductInProductListInput!]
  createMany: DistributionForProductInProductListCreateManyProductInProductListInputEnvelope
  delete: [DistributionForProductInProductListWhereUniqueInput!]
  deleteMany: [DistributionForProductInProductListScalarWhereInput!]
  disconnect: [DistributionForProductInProductListWhereUniqueInput!]
  set: [DistributionForProductInProductListWhereUniqueInput!]
  update: [DistributionForProductInProductListUpdateWithWhereUniqueWithoutProductInProductListInput!]
  updateMany: [DistributionForProductInProductListUpdateManyWithWhereWithoutProductInProductListInput!]
  upsert: [DistributionForProductInProductListUpsertWithWhereUniqueWithoutProductInProductListInput!]
}

input DistributionForProductInProductListUpdateWithWhereUniqueWithoutDistributionInput {
  data: DistributionForProductInProductListUpdateWithoutDistributionInput!
  where: DistributionForProductInProductListWhereUniqueInput!
}

input DistributionForProductInProductListUpdateWithWhereUniqueWithoutProductInProductListInput {
  data: DistributionForProductInProductListUpdateWithoutProductInProductListInput!
  where: DistributionForProductInProductListWhereUniqueInput!
}

input DistributionForProductInProductListUpdateWithoutDistributionInput {
  productInProductList: ProductInProductListUpdateOneRequiredWithoutDistributionsInput
}

input DistributionForProductInProductListUpdateWithoutProductInProductListInput {
  distribution: DistributionUpdateOneRequiredWithoutProductInProductListsInput
}

input DistributionForProductInProductListUpsertWithWhereUniqueWithoutDistributionInput {
  create: DistributionForProductInProductListCreateWithoutDistributionInput!
  update: DistributionForProductInProductListUpdateWithoutDistributionInput!
  where: DistributionForProductInProductListWhereUniqueInput!
}

input DistributionForProductInProductListUpsertWithWhereUniqueWithoutProductInProductListInput {
  create: DistributionForProductInProductListCreateWithoutProductInProductListInput!
  update: DistributionForProductInProductListUpdateWithoutProductInProductListInput!
  where: DistributionForProductInProductListWhereUniqueInput!
}

input DistributionForProductInProductListWhereInput {
  AND: [DistributionForProductInProductListWhereInput!]
  NOT: [DistributionForProductInProductListWhereInput!]
  OR: [DistributionForProductInProductListWhereInput!]
  distribution: DistributionWhereInput
  distributionId: IntFilter
  id: IntFilter
  productInProductList: ProductInProductListWhereInput
  productInProductListId: IntFilter
}

input DistributionForProductInProductListWhereUniqueInput {
  distributionId_productInProductListId: DistributionForProductInProductListDistributionIdProductInProductListIdCompoundUniqueInput
  id: Int
}

input DistributionListRelationFilter {
  every: DistributionWhereInput
  none: DistributionWhereInput
  some: DistributionWhereInput
}

input DistributionNameChannelIdCompoundUniqueInput {
  channelId: Int!
  name: String!
}

input DistributionScalarWhereInput {
  AND: [DistributionScalarWhereInput!]
  NOT: [DistributionScalarWhereInput!]
  OR: [DistributionScalarWhereInput!]
  channelId: IntFilter
  doorCount: IntFilter
  id: IntFilter
  name: StringFilter
}

input DistributionUpdateManyMutationInput {
  doorCount: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input DistributionUpdateManyWithWhereWithoutChannelInput {
  data: DistributionUpdateManyMutationInput!
  where: DistributionScalarWhereInput!
}

input DistributionUpdateManyWithoutChannelInput {
  connect: [DistributionWhereUniqueInput!]
  connectOrCreate: [DistributionCreateOrConnectWithoutChannelInput!]
  create: [DistributionCreateWithoutChannelInput!]
  createMany: DistributionCreateManyChannelInputEnvelope
  delete: [DistributionWhereUniqueInput!]
  deleteMany: [DistributionScalarWhereInput!]
  disconnect: [DistributionWhereUniqueInput!]
  set: [DistributionWhereUniqueInput!]
  update: [DistributionUpdateWithWhereUniqueWithoutChannelInput!]
  updateMany: [DistributionUpdateManyWithWhereWithoutChannelInput!]
  upsert: [DistributionUpsertWithWhereUniqueWithoutChannelInput!]
}

input DistributionUpdateOneRequiredWithoutProductInProductListsInput {
  connect: DistributionWhereUniqueInput
  connectOrCreate: DistributionCreateOrConnectWithoutProductInProductListsInput
  create: DistributionCreateWithoutProductInProductListsInput
  update: DistributionUpdateWithoutProductInProductListsInput
  upsert: DistributionUpsertWithoutProductInProductListsInput
}

input DistributionUpdateWithWhereUniqueWithoutChannelInput {
  data: DistributionUpdateWithoutChannelInput!
  where: DistributionWhereUniqueInput!
}

input DistributionUpdateWithoutChannelInput {
  doorCount: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  productInProductLists: DistributionForProductInProductListUpdateManyWithoutDistributionInput
}

input DistributionUpdateWithoutProductInProductListsInput {
  channel: ChannelUpdateOneRequiredWithoutDistributionsInput
  doorCount: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input DistributionUpsertWithWhereUniqueWithoutChannelInput {
  create: DistributionCreateWithoutChannelInput!
  update: DistributionUpdateWithoutChannelInput!
  where: DistributionWhereUniqueInput!
}

input DistributionUpsertWithoutProductInProductListsInput {
  create: DistributionCreateWithoutProductInProductListsInput!
  update: DistributionUpdateWithoutProductInProductListsInput!
}

input DistributionWhereInput {
  AND: [DistributionWhereInput!]
  NOT: [DistributionWhereInput!]
  OR: [DistributionWhereInput!]
  channel: ChannelWhereInput
  channelId: IntFilter
  doorCount: IntFilter
  id: IntFilter
  name: StringFilter
  productInProductLists: DistributionForProductInProductListListRelationFilter
}

input DistributionWhereUniqueInput {
  id: Int
  name: String
  name_channelId: DistributionNameChannelIdCompoundUniqueInput
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

type Mutation {
  updateManyProductInProductList(data: [ProductInProductListUpdateRowInput!]): [ProductInProductList!]!
  updateOneProductInProductList(data: ProductInProductListUpdateInput!, where: ProductInProductListWhereUniqueInput!): ProductInProductList
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

"""
PageInfo cursor, as defined in https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  The cursor corresponding to the last nodes in edges. Null if the connection is empty.
  """
  endCursor: String

  """
  Used to indicate whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Used to indicate whether more edges exist prior to the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  The cursor corresponding to the first nodes in edges. Null if the connection is empty.
  """
  startCursor: String
}

type Product {
  colorwayName: String!
  id: ID!
  ownId: Int!
  pc9: String!
}

input ProductCreateNestedOneWithoutProductListsInput {
  connect: ProductWhereUniqueInput
  connectOrCreate: ProductCreateOrConnectWithoutProductListsInput
  create: ProductCreateWithoutProductListsInput
}

input ProductCreateOrConnectWithoutProductListsInput {
  create: ProductCreateWithoutProductListsInput!
  where: ProductWhereUniqueInput!
}

input ProductCreateWithoutProductListsInput {
  colorwayName: String!
  pc9: String!
}

type ProductInProductList {
  distributions(after: DistributionForProductInProductListWhereUniqueInput, before: DistributionForProductInProductListWhereUniqueInput, first: Int, last: Int): [DistributionForProductInProductList!]!
  exclusive: String
  exclusiveComments: String
  id: ID!
  minimumOrderQuantity: Int
  ownId: Int!
  productLifecycleGroup: ProductLifecycleGroup
}

input ProductInProductListCreateManyProductListInput {
  exclusive: String
  exclusiveComments: String
  id: Int
  minimumOrderQuantity: Int
  productId: Int!
  productLifecycleGroupName: String
}

input ProductInProductListCreateManyProductListInputEnvelope {
  data: [ProductInProductListCreateManyProductListInput!]
  skipDuplicates: Boolean
}

input ProductInProductListCreateNestedManyWithoutProductListInput {
  connect: [ProductInProductListWhereUniqueInput!]
  connectOrCreate: [ProductInProductListCreateOrConnectWithoutProductListInput!]
  create: [ProductInProductListCreateWithoutProductListInput!]
  createMany: ProductInProductListCreateManyProductListInputEnvelope
}

input ProductInProductListCreateNestedOneWithoutDistributionsInput {
  connect: ProductInProductListWhereUniqueInput
  connectOrCreate: ProductInProductListCreateOrConnectWithoutDistributionsInput
  create: ProductInProductListCreateWithoutDistributionsInput
}

input ProductInProductListCreateOrConnectWithoutDistributionsInput {
  create: ProductInProductListCreateWithoutDistributionsInput!
  where: ProductInProductListWhereUniqueInput!
}

input ProductInProductListCreateOrConnectWithoutProductListInput {
  create: ProductInProductListCreateWithoutProductListInput!
  where: ProductInProductListWhereUniqueInput!
}

input ProductInProductListCreateWithoutDistributionsInput {
  exclusive: String
  exclusiveComments: String
  minimumOrderQuantity: Int
  product: ProductCreateNestedOneWithoutProductListsInput!
  productLifecycleGroup: ProductLifecycleGroupCreateNestedOneWithoutProductInProductListInput
  productList: ProductListCreateNestedOneWithoutProductsInput!
}

input ProductInProductListCreateWithoutProductListInput {
  distributions: DistributionForProductInProductListCreateNestedManyWithoutProductInProductListInput
  exclusive: String
  exclusiveComments: String
  minimumOrderQuantity: Int
  product: ProductCreateNestedOneWithoutProductListsInput!
  productLifecycleGroup: ProductLifecycleGroupCreateNestedOneWithoutProductInProductListInput
}

input ProductInProductListListRelationFilter {
  every: ProductInProductListWhereInput
  none: ProductInProductListWhereInput
  some: ProductInProductListWhereInput
}

input ProductInProductListProductIdProductListIdCompoundUniqueInput {
  productId: Int!
  productListId: Int!
}

input ProductInProductListScalarWhereInput {
  AND: [ProductInProductListScalarWhereInput!]
  NOT: [ProductInProductListScalarWhereInput!]
  OR: [ProductInProductListScalarWhereInput!]
  exclusive: StringNullableFilter
  exclusiveComments: StringNullableFilter
  id: IntFilter
  minimumOrderQuantity: IntNullableFilter
  productId: IntFilter
  productLifecycleGroupName: StringNullableFilter
  productListId: IntFilter
}

input ProductInProductListUpdateInput {
  distributions: DistributionForProductInProductListUpdateManyWithoutProductInProductListInput
  exclusive: NullableStringFieldUpdateOperationsInput
  exclusiveComments: NullableStringFieldUpdateOperationsInput
  minimumOrderQuantity: NullableIntFieldUpdateOperationsInput
  product: ProductUpdateOneRequiredWithoutProductListsInput
  productLifecycleGroup: ProductLifecycleGroupUpdateOneWithoutProductInProductListInput
  productList: ProductListUpdateOneRequiredWithoutProductsInput
}

input ProductInProductListUpdateManyMutationInput {
  exclusive: NullableStringFieldUpdateOperationsInput
  exclusiveComments: NullableStringFieldUpdateOperationsInput
  minimumOrderQuantity: NullableIntFieldUpdateOperationsInput
}

input ProductInProductListUpdateManyWithWhereWithoutProductListInput {
  data: ProductInProductListUpdateManyMutationInput!
  where: ProductInProductListScalarWhereInput!
}

input ProductInProductListUpdateManyWithoutProductListInput {
  connect: [ProductInProductListWhereUniqueInput!]
  connectOrCreate: [ProductInProductListCreateOrConnectWithoutProductListInput!]
  create: [ProductInProductListCreateWithoutProductListInput!]
  createMany: ProductInProductListCreateManyProductListInputEnvelope
  delete: [ProductInProductListWhereUniqueInput!]
  deleteMany: [ProductInProductListScalarWhereInput!]
  disconnect: [ProductInProductListWhereUniqueInput!]
  set: [ProductInProductListWhereUniqueInput!]
  update: [ProductInProductListUpdateWithWhereUniqueWithoutProductListInput!]
  updateMany: [ProductInProductListUpdateManyWithWhereWithoutProductListInput!]
  upsert: [ProductInProductListUpsertWithWhereUniqueWithoutProductListInput!]
}

input ProductInProductListUpdateOneRequiredWithoutDistributionsInput {
  connect: ProductInProductListWhereUniqueInput
  connectOrCreate: ProductInProductListCreateOrConnectWithoutDistributionsInput
  create: ProductInProductListCreateWithoutDistributionsInput
  update: ProductInProductListUpdateWithoutDistributionsInput
  upsert: ProductInProductListUpsertWithoutDistributionsInput
}

input ProductInProductListUpdateRowInput {
  data: ProductInProductListUpdateInput!
  where: ProductInProductListWhereUniqueInput!
}

input ProductInProductListUpdateWithWhereUniqueWithoutProductListInput {
  data: ProductInProductListUpdateWithoutProductListInput!
  where: ProductInProductListWhereUniqueInput!
}

input ProductInProductListUpdateWithoutDistributionsInput {
  exclusive: NullableStringFieldUpdateOperationsInput
  exclusiveComments: NullableStringFieldUpdateOperationsInput
  minimumOrderQuantity: NullableIntFieldUpdateOperationsInput
  product: ProductUpdateOneRequiredWithoutProductListsInput
  productLifecycleGroup: ProductLifecycleGroupUpdateOneWithoutProductInProductListInput
  productList: ProductListUpdateOneRequiredWithoutProductsInput
}

input ProductInProductListUpdateWithoutProductListInput {
  distributions: DistributionForProductInProductListUpdateManyWithoutProductInProductListInput
  exclusive: NullableStringFieldUpdateOperationsInput
  exclusiveComments: NullableStringFieldUpdateOperationsInput
  minimumOrderQuantity: NullableIntFieldUpdateOperationsInput
  product: ProductUpdateOneRequiredWithoutProductListsInput
  productLifecycleGroup: ProductLifecycleGroupUpdateOneWithoutProductInProductListInput
}

input ProductInProductListUpsertWithWhereUniqueWithoutProductListInput {
  create: ProductInProductListCreateWithoutProductListInput!
  update: ProductInProductListUpdateWithoutProductListInput!
  where: ProductInProductListWhereUniqueInput!
}

input ProductInProductListUpsertWithoutDistributionsInput {
  create: ProductInProductListCreateWithoutDistributionsInput!
  update: ProductInProductListUpdateWithoutDistributionsInput!
}

input ProductInProductListWhereInput {
  AND: [ProductInProductListWhereInput!]
  NOT: [ProductInProductListWhereInput!]
  OR: [ProductInProductListWhereInput!]
  distributions: DistributionForProductInProductListListRelationFilter
  exclusive: StringNullableFilter
  exclusiveComments: StringNullableFilter
  id: IntFilter
  minimumOrderQuantity: IntNullableFilter
  product: ProductWhereInput
  productId: IntFilter
  productLifecycleGroup: ProductLifecycleGroupWhereInput
  productLifecycleGroupName: StringNullableFilter
  productList: ProductListWhereInput
  productListId: IntFilter
}

input ProductInProductListWhereUniqueInput {
  id: Int
  productId_productListId: ProductInProductListProductIdProductListIdCompoundUniqueInput
}

type ProductLifecycleGroup {
  displayName: String!
  name: String!
}

input ProductLifecycleGroupCreateNestedOneWithoutProductInProductListInput {
  connect: ProductLifecycleGroupWhereUniqueInput
  connectOrCreate: ProductLifecycleGroupCreateOrConnectWithoutProductInProductListInput
  create: ProductLifecycleGroupCreateWithoutProductInProductListInput
}

input ProductLifecycleGroupCreateOrConnectWithoutProductInProductListInput {
  create: ProductLifecycleGroupCreateWithoutProductInProductListInput!
  where: ProductLifecycleGroupWhereUniqueInput!
}

input ProductLifecycleGroupCreateWithoutProductInProductListInput {
  displayName: String!
  name: String!
}

input ProductLifecycleGroupUpdateOneWithoutProductInProductListInput {
  connect: ProductLifecycleGroupWhereUniqueInput
  connectOrCreate: ProductLifecycleGroupCreateOrConnectWithoutProductInProductListInput
  create: ProductLifecycleGroupCreateWithoutProductInProductListInput
  delete: Boolean
  disconnect: Boolean
  update: ProductLifecycleGroupUpdateWithoutProductInProductListInput
  upsert: ProductLifecycleGroupUpsertWithoutProductInProductListInput
}

input ProductLifecycleGroupUpdateWithoutProductInProductListInput {
  displayName: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input ProductLifecycleGroupUpsertWithoutProductInProductListInput {
  create: ProductLifecycleGroupCreateWithoutProductInProductListInput!
  update: ProductLifecycleGroupUpdateWithoutProductInProductListInput!
}

input ProductLifecycleGroupWhereInput {
  AND: [ProductLifecycleGroupWhereInput!]
  NOT: [ProductLifecycleGroupWhereInput!]
  OR: [ProductLifecycleGroupWhereInput!]
  ProductInProductList: ProductInProductListListRelationFilter
  displayName: StringFilter
  name: StringFilter
}

input ProductLifecycleGroupWhereUniqueInput {
  displayName: String
  name: String
}

type ProductList {
  channels(after: ChannelInProductListWhereUniqueInput, before: ChannelInProductListWhereUniqueInput, first: Int, last: Int): [ChannelInProductList!]!
  id: ID!
  ownId: Int!
  productListProductConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): ProductListProductConnection!
  title: String!
  validDistributions: [Distribution!]!
}

input ProductListCreateNestedOneWithoutChannelsInput {
  connect: ProductListWhereUniqueInput
  connectOrCreate: ProductListCreateOrConnectWithoutChannelsInput
  create: ProductListCreateWithoutChannelsInput
}

input ProductListCreateNestedOneWithoutProductsInput {
  connect: ProductListWhereUniqueInput
  connectOrCreate: ProductListCreateOrConnectWithoutProductsInput
  create: ProductListCreateWithoutProductsInput
}

input ProductListCreateOrConnectWithoutChannelsInput {
  create: ProductListCreateWithoutChannelsInput!
  where: ProductListWhereUniqueInput!
}

input ProductListCreateOrConnectWithoutProductsInput {
  create: ProductListCreateWithoutProductsInput!
  where: ProductListWhereUniqueInput!
}

input ProductListCreateWithoutChannelsInput {
  products: ProductInProductListCreateNestedManyWithoutProductListInput
  title: String!
}

input ProductListCreateWithoutProductsInput {
  channels: ChannelInProductListCreateNestedManyWithoutProductListInput
  title: String!
}

type ProductListProduct {
  id: ID!
  product: Product!
  productInProductList: ProductInProductList!
}

type ProductListProductConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [ProductListProductEdge!]!

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type ProductListProductEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: ProductListProduct!
}

input ProductListUpdateOneRequiredWithoutChannelsInput {
  connect: ProductListWhereUniqueInput
  connectOrCreate: ProductListCreateOrConnectWithoutChannelsInput
  create: ProductListCreateWithoutChannelsInput
  update: ProductListUpdateWithoutChannelsInput
  upsert: ProductListUpsertWithoutChannelsInput
}

input ProductListUpdateOneRequiredWithoutProductsInput {
  connect: ProductListWhereUniqueInput
  connectOrCreate: ProductListCreateOrConnectWithoutProductsInput
  create: ProductListCreateWithoutProductsInput
  update: ProductListUpdateWithoutProductsInput
  upsert: ProductListUpsertWithoutProductsInput
}

input ProductListUpdateWithoutChannelsInput {
  products: ProductInProductListUpdateManyWithoutProductListInput
  title: StringFieldUpdateOperationsInput
}

input ProductListUpdateWithoutProductsInput {
  channels: ChannelInProductListUpdateManyWithoutProductListInput
  title: StringFieldUpdateOperationsInput
}

input ProductListUpsertWithoutChannelsInput {
  create: ProductListCreateWithoutChannelsInput!
  update: ProductListUpdateWithoutChannelsInput!
}

input ProductListUpsertWithoutProductsInput {
  create: ProductListCreateWithoutProductsInput!
  update: ProductListUpdateWithoutProductsInput!
}

input ProductListWhereInput {
  AND: [ProductListWhereInput!]
  NOT: [ProductListWhereInput!]
  OR: [ProductListWhereInput!]
  channels: ChannelInProductListListRelationFilter
  id: IntFilter
  products: ProductInProductListListRelationFilter
  title: StringFilter
}

input ProductListWhereUniqueInput {
  id: Int
}

input ProductUpdateOneRequiredWithoutProductListsInput {
  connect: ProductWhereUniqueInput
  connectOrCreate: ProductCreateOrConnectWithoutProductListsInput
  create: ProductCreateWithoutProductListsInput
  update: ProductUpdateWithoutProductListsInput
  upsert: ProductUpsertWithoutProductListsInput
}

input ProductUpdateWithoutProductListsInput {
  colorwayName: StringFieldUpdateOperationsInput
  pc9: StringFieldUpdateOperationsInput
}

input ProductUpsertWithoutProductListsInput {
  create: ProductCreateWithoutProductListsInput!
  update: ProductUpdateWithoutProductListsInput!
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  colorwayName: StringFilter
  id: IntFilter
  pc9: StringFilter
  productLists: ProductInProductListListRelationFilter
}

input ProductWhereUniqueInput {
  id: Int
}

type Query {
  product(where: ProductWhereUniqueInput!): Product
  productLifecycleGroup(where: ProductLifecycleGroupWhereUniqueInput!): ProductLifecycleGroup
  productLifecycleGroups(after: ProductLifecycleGroupWhereUniqueInput, before: ProductLifecycleGroupWhereUniqueInput, first: Int, last: Int, where: ProductLifecycleGroupWhereInput): [ProductLifecycleGroup!]!
  productList(where: ProductListWhereUniqueInput!): ProductList
  productLists(after: ProductListWhereUniqueInput, before: ProductListWhereUniqueInput, first: Int, last: Int, where: ProductListWhereInput): [ProductList!]!
  products(after: ProductWhereUniqueInput, before: ProductWhereUniqueInput, first: Int, last: Int, where: ProductWhereInput): [Product!]!
}

enum QueryMode {
  default
  insensitive
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}